type Lobby implements Node {
  id: ID!
  name: String!
  public: Boolean!
  owner: User!
  questions: [Question!]!
}

type Query {
  lobbies(
    first: Int,
    last: Int,
    after: ID,
    before: ID,
    orderDirection: OrderDirection! = ASC
    orderBy: LobbiesQueryOrderBy! = LOBBY_ID
  ): LobbyConnection!
  lobby(id: ID!): Lobby!
}

enum LobbiesQueryOrderBy {
  LOBBY_ID
}

extend type Mutation {
  createLobby(name: String!, public: Boolean! = false): CreateLobbyPayload!
  deleteLobby(id: ID!): Lobby!
}

type CreateLobbyPayload {
  lobby: Lobby!
}

type LobbyEdge implements Edge {
  cursor: String!
  node: Lobby!
}

type LobbyConnection implements Connection {
  edges: [LobbyEdge!]!
  pageInfo: PageInfo!
}
