package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"time"

	"github.com/hytkgami/trivia-backend/graph/loader"
	"github.com/hytkgami/trivia-backend/graph/model"
	"github.com/hytkgami/trivia-backend/interfaces"
	"github.com/hytkgami/trivia-backend/usecase"
)

// CreateQuestions is the resolver for the createQuestions field.
func (r *mutationResolver) CreateQuestions(ctx context.Context, lobbyID string, questions []*model.QuestionInput) (*model.CreateQuestionPayload, error) {
	uid, err := interfaces.GetUserUID(ctx)
	if err != nil {
		return nil, err
	}
	input := make([]*usecase.QuestionInput, len(questions))
	for i, q := range questions {
		input[i] = &usecase.QuestionInput{
			Title:       q.Title,
			OrderNumber: q.OrderNumber,
			Score:       q.Score,
		}
	}
	created, err := r.QuestionInteractor.CreateQuestions(ctx, uid, lobbyID, input)
	if err != nil {
		return nil, err
	}
	result := make([]*model.Question, len(created))
	for i, q := range created {
		result[i] = &model.Question{
			ID:          q.ID,
			Title:       q.Title,
			OrderNumber: q.OrderNumber,
			Score:       q.Score,
		}
	}
	return &model.CreateQuestionPayload{
		Questions: result,
	}, nil
}

// Questions is the resolver for the questions field.
func (r *queryResolver) Questions(ctx context.Context, lobbyID string) ([]*model.Question, error) {
	questions, err := r.QuestionInteractor.FetchQuestionsByLobbyID(ctx, lobbyID)
	if err != nil {
		return nil, err
	}
	result := make([]*model.Question, len(questions))
	for i, q := range questions {
		result[i] = &model.Question{
			ID:          q.ID,
			Title:       q.Title,
			OrderNumber: q.OrderNumber,
			Score:       q.Score,
		}
	}
	return result, nil
}

// Answers is the resolver for the answers field.
func (r *questionResolver) Answers(ctx context.Context, obj *model.Question) ([]*model.Answer, error) {
	answers, err := loader.LoadAnswersByQuestionID(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return answers, nil
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.Time, error) {
	ch := make(chan *model.Time)
	go func() {
		for {
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			currentTime := time.Now()
			t := &model.Time{
				UnixTime:  int(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}

			select {
			case ch <- t:
			default:
				fmt.Println("Channel closed.")
				return
			}
		}
	}()
	return ch, nil
}

// Question returns QuestionResolver implementation.
func (r *Resolver) Question() QuestionResolver { return &questionResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type questionResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
